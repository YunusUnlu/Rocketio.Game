<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>Space Devourer - IO Game</title>
  <style>
    body{box-sizing:border-box;margin:0;padding:0;font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif;background:linear-gradient(135deg,#0c0c2e 0%,#1a1a3e 50%,#2d1b69 100%);color:white;overflow:hidden;height:100vh;}
    .game-container{position:relative;width:100vw;height:100vh;overflow:hidden;}
    .game-area{position:absolute;width:100vw;height:100vh;left:0;top:0;background:radial-gradient(circle at center,rgba(25,25,62,.8) 0%,rgba(12,12,46,.9) 100%);overflow:hidden;}
    .world{position:absolute;width:2400px;height:2400px;transform-origin:0 0;transition:transform .08s ease-out;}

    .spaceship{
      position:absolute;width:30px;height:30px;border-radius:50%;
      background:linear-gradient(45deg,#00bcd4 0%,#2196f3 50%,#3f51b5 100%);
      border:2px solid #fff;box-shadow:0 0 20px rgba(0,188,212,.8);
      transition:transform .08s ease, box-shadow .1s ease;
      z-index:100;display:flex;align-items:center;justify-content:center;
      transform-origin:50% 50%;
    }
    .ship-emoji{font-size:16px;pointer-events:none;user-select:none;filter:drop-shadow(0 0 2px rgba(255,255,255,.6));}
    /* basit alev efekti; gemi döndükçe birlikte dönecek */
    .ship-flame{
      position:absolute;left:50%;top:100%;
      width:8px;height:14px;transform:translate(-50%, -20%) scaleY(1);
      background:radial-gradient(circle at 50% 20%, #fff, #ffd54f 40%, #ff6d00 65%, rgba(255,109,0,0) 70%);
      filter:blur(0.3px);opacity:.0;border-radius:50%;
      transition:opacity .1s ease, transform .08s ease;
      pointer-events:none;
    }

    .celestial-object{position:absolute;border-radius:50%;transition:all .2s ease;cursor:pointer;}
    .asteroid{background:radial-gradient(circle,#8c7853 0%,#6d5a3e 100%);border:1px solid rgba(255,255,255,.2);}
    .moon{background:radial-gradient(circle,#e0e0e0 0%,#9e9e9e 100%);border:1px solid rgba(255,255,255,.3);}
    .small-planet{background:radial-gradient(circle,#ff5722 0%,#d32f2f 100%);border:2px solid rgba(255,255,255,.2);}
    .medium-planet{background:radial-gradient(circle,#2196f3 0%,#4caf50 30%,#2196f3 70%);border:2px solid rgba(255,255,255,.3);}
    .large-planet{background:radial-gradient(circle,#d2691e 0%,#cd853f 30%,#a0522d 100%);border:3px solid rgba(255,255,255,.4);}
    .gas-giant{background:radial-gradient(circle,#fad5a5 0%,#deb887 100%);border:3px solid rgba(255,255,255,.5);position:relative;}
    .gas-giant::after{content:'';position:absolute;top:50%;left:50%;width:120%;height:120%;border:2px solid rgba(255,255,255,.3);border-radius:50%;transform:translate(-50%,-50%);pointer-events:none;}

    .hud{position:absolute;top:60px;left:20px;z-index:200;background:rgba(255,255,255,.8);color:#000;padding:20px;border-radius:15px;backdrop-filter:blur(10px);}
    .lives{display:flex;gap:10px;margin-bottom:15px;}
    .life{width:30px;height:30px;background:linear-gradient(45deg,#ffffff,#cc0000);border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:16px;}
    .life.lost{background:rgba(100,100,100,.3);filter:grayscale(100%);}
    .size-meter{width:200px;height:20px;background:rgba(0,0,0,.2);border-radius:10px;overflow:hidden;margin-bottom:10px;}
    .size-fill{height:100%;background:linear-gradient(90deg,#4caf50 0%,#2196f3 50%,#9c27b0 100%);border-radius:10px;transition:width .3s ease;}

    .controls{position:absolute;bottom:20px;left:20px;z-index:200;background:rgba(255,255,255,.8);color:#000;padding:15px;border-radius:15px;backdrop-filter:blur(10px);font-size:14px;}

    .victory-screen,.game-over-screen{position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.9);display:none;align-items:center;justify-content:center;z-index:300;backdrop-filter:blur(10px);}
    .victory-content{text-align:center;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);padding:40px;border-radius:20px;box-shadow:0 20px 40px rgba(0,0,0,.5);}
    .game-over-content{text-align:center;background:linear-gradient(135deg,#ff4444 0%,#cc0000 100%);padding:40px;border-radius:20px;box-shadow:0 20px 40px rgba(0,0,0,.5);}
    .restart-btn{background:linear-gradient(135deg,#4caf50 0%,#45a049 100%);border:none;color:#fff;padding:15px 30px;margin-top:20px;border-radius:10px;cursor:pointer;font-size:16px;transition:all .3s ease;}
    .restart-btn:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(76,175,80,.4);}

    .stars{position:absolute;width:100%;height:100%;
      background-image:
        radial-gradient(1px 1px at 20px 30px,#eee,transparent),
        radial-gradient(1px 1px at 40px 70px,rgba(255,255,255,.8),transparent),
        radial-gradient(1px 1px at 90px 40px,#fff,transparent),
        radial-gradient(1px 1px at 130px 80px,rgba(255,255,255,.6),transparent);
      background-repeat:repeat;background-size:150px 100px;animation:twinkle 3s ease-in-out infinite alternate;}
    @keyframes twinkle{0%{opacity:.7}100%{opacity:1}}

    .progress-info{position:absolute;top:60px;right:20px;z-index:200;background:rgba(255,255,255,.8);color:#000;padding:15px;border-radius:15px;backdrop-filter:blur(10px);text-align:center;}

    .boost-indicator{position:absolute;bottom:140px;left:20px;z-index:200;background:rgba(0,0,0,.8);padding:10px 15px;border-radius:10px;backdrop-filter:blur(10px);font-size:12px;}
    .boost-bar{width:100px;height:8px;background:rgba(255,255,255,.2);border-radius:4px;overflow:hidden;margin-top:5px;}
    .boost-fill{height:100%;background:linear-gradient(90deg,#ffeb3b 0%,#ff9800 100%);border-radius:4px;transition:width .1s ease;}

    .ammo-indicator{position:absolute;bottom:80px;left:20px;z-index:200;background:rgba(0,0,0,.8);padding:10px 15px;border-radius:10px;backdrop-filter:blur(10px);font-size:12px;}
    .ammo-display{display:flex;gap:5px;margin-top:5px;}
    .ammo-bullet{width:12px;height:12px;background:linear-gradient(45deg,#ffd700 0%,#ff8c00 100%);border-radius:50%;border:1px solid rgba(255,255,255,.5);}
    .ammo-bullet.empty{background:rgba(100,100,100,.3);border-color:rgba(100,100,100,.5);}

    .bullet{position:absolute;width:8px;height:8px;background:linear-gradient(45deg,#ffd700 0%,#ff4444 100%);border-radius:50%;box-shadow:0 0 10px rgba(255,215,0,.8);z-index:50;}

    .ammo-pickup{position:absolute;background:linear-gradient(45deg,#ffd700 0%,#ffeb3b 100%);border:2px solid rgba(255,255,255,.8);border-radius:5px;display:flex;align-items:center;justify-content:center;font-size:14px;animation:ammoGlow 2s ease-in-out infinite alternate;cursor:pointer;}
    @keyframes ammoGlow{0%{box-shadow:0 0 10px rgba(255,215,0,.6)}100%{box-shadow:0 0 20px rgba(255,215,0,1)}}

    .planet-hit{animation:planetHit .3s ease-in-out;}
    @keyframes planetHit{0%,100%{filter:brightness(1)}50%{filter:brightness(2) hue-rotate(0deg) saturate(2)}}

    .minimap{position:absolute;bottom:20px;right:20px;width:200px;height:200px;background:rgba(0,0,0,.8);border:2px solid rgba(255,255,255,.3);border-radius:10px;z-index:200;backdrop-filter:blur(10px);overflow:hidden;}
    .minimap-title{position:absolute;top:-25px;left:0;right:0;text-align:center;font-size:12px;color:rgba(255,255,255,.8);}
    .minimap-world{position:relative;width:100%;height:100%;background:radial-gradient(circle at center,rgba(25,25,62,.6) 0%,rgba(12,12,46,.8) 100%);}
    .minimap-spaceship{position:absolute;width:6px;height:6px;background:#00bcd4;border:1px solid #fff;border-radius:50%;box-shadow:0 0 8px rgba(255,255,255,.8);z-index:10;}
    .minimap-object{position:absolute;border-radius:50%;border:1px solid rgba(255,255,255,.4);}
    .minimap-object.edible{background:#4caf50;box-shadow:0 0 4px rgba(76,175,80,.6);}
    .minimap-object.dangerous{background:#f44336;box-shadow:0 0 4px rgba(244,67,54,.6);}
    .minimap-object.neutral{background:#ff9800;box-shadow:0 0 4px rgba(255,152,0,.6);}
    .minimap-ammo{position:absolute;background:#ffd700;border:1px solid rgba(255,255,255,.6);border-radius:2px;box-shadow:0 0 4px rgba(255,215,0,.8);}

    .score-history{position:absolute;top:0;left:0;right:0;height:40px;background:linear-gradient(135deg,rgba(0,0,0,.9) 0%,rgba(25,25,62,.9) 100%);border-bottom:2px solid rgba(255,255,255,.2);display:flex;align-items:center;justify-content:center;z-index:250;backdrop-filter:blur(10px);font-size:14px;color:rgba(255,255,255,.9);}
    .history-item{margin:0 15px;padding:5px 10px;background:rgba(255,255,255,.1);border-radius:8px;border:1px solid rgba(255,255,255,.2);}
    .history-item.best{background:linear-gradient(45deg,#ffd700 0%,#ff8c00 100%);color:#000;font-weight:bold;box-shadow:0 0 10px rgba(255,215,0,.5);}

    .welcome-screen{position:absolute;top:0;left:0;width:100%;height:100%;background:linear-gradient(135deg,rgba(0,0,0,.95) 0%,rgba(25,25,62,.95) 100%);display:flex;align-items:center;justify-content:center;z-index:400;backdrop-filter:blur(15px);}
    .welcome-content{text-align:center;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);padding:40px;border-radius:20px;box-shadow:0 20px 40px rgba(0,0,0,.5);max-width:600px;border:2px solid rgba(255,255,255,.2);}
    .welcome-content h1{font-size:2.5em;margin-bottom:10px;text-shadow:2px 2px 4px rgba(0,0,0,.5);}
    .welcome-content h2{font-size:1.3em;margin-bottom:25px;color:rgba(255,255,255,.9);}
    .challenge-info{text-align:left;background:rgba(0,0,0,.3);padding:20px;border-radius:15px;margin:20px 0;border:1px solid rgba(255,255,255,.2);}
    .challenge-info ul{margin:10px 0;padding-left:20px;}
    .challenge-info li{margin:8px 0;line-height:1.4;}
    .start-btn{background:linear-gradient(135deg,#4caf50 0%,#45a049 100%);border:none;color:#fff;padding:20px 40px;margin-top:25px;border-radius:15px;cursor:pointer;font-size:18px;font-weight:bold;transition:all .3s ease;border:2px solid rgba(255,255,255,.3);text-shadow:1px 1px 2px rgba(0,0,0,.5);}
    .start-btn:hover{transform:translateY(-3px);box-shadow:0 8px 25px rgba(76,175,80,.4);background:linear-gradient(135deg,#5cbf60 0%,#4caf50 100%);}

    .health-pickup{position:absolute;background:linear-gradient(45deg,#ff4444 0%,#ff6b6b 100%);border:2px solid rgba(255,255,255,.8);border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:12px;animation:healthGlow 2s ease-in-out infinite alternate;cursor:pointer;}
    @keyframes healthGlow{0%{box-shadow:0 0 10px rgba(255,68,68,.6)}100%{box-shadow:0 0 20px rgba(255,68,68,1)}}
  </style>
</head>
<body>
<div class="game-container">
  <div class="welcome-screen" id="welcomeScreen">
    <div class="welcome-content">
      <h1>Rocketio.Game</h1>
      <h2>Ready to destroy!</h2>
      <div class="challenge-info">
        <p><strong>Your Mission:</strong> Destroy all the Universe!</p>
        <p><strong>Rules:</strong></p>
        <ul>
          <li>You can eat only smaller things than you!</li>
          <li>Big things makes you trouble! (You got 3 lives)</li>
          <li>Eat and grow!</li>
          <li>You can shoot twice to destroy a planet</li>
          <li>Search for bullets and lives</li>
        </ul>
        <p><strong>Controls:</strong> WASD | Space - Fire | Shift - Boost</p>
        <p><strong>Mission:</strong> Become the fastest ship alive!</p>
      </div>
      <button class="start-btn" onclick="startGameFromWelcome()">LETS GO!</button>
    </div>
  </div>

  <div class="score-history" id="scoreHistory">
    <div>📊 Last Games: <span id="historyDisplay">Not played yet!</span></div>
  </div>

  <div class="stars"></div>

  <div class="game-area" id="gameArea">
    <div class="world" id="world">
      <div class="spaceship" id="spaceship">
        <div class="ship-emoji">🚀</div>
        <div class="ship-flame"></div>
      </div>
    </div>
  </div>

  <div class="hud">
    <div><strong>Rocketio.Game</strong></div>
    <div class="lives" id="lives"><div class="life">❤️</div><div class="life">❤️</div><div class="life">❤️</div></div>
    <div><strong>Time:</strong> <span id="gameTimer">00:00</span></div>
    <div><strong>Ammo:</strong> <span id="ammoCount">5/5</span></div>
    <div><strong>Size:</strong></div>
    <div class="size-meter"><div class="size-fill" id="sizeFill" style="width:10%;"></div></div>
    <div id="sizeText">Size: 30px</div>
  </div>

  <div class="minimap">
    <div class="minimap-title">🗺️ Minimap</div>
    <div class="minimap-world" id="minimapWorld">
      <div class="minimap-spaceship" id="minimapSpaceship"></div>
    </div>
  </div>

  <div class="progress-info">
    <div><strong>Progress</strong></div>
    <div id="objectsRemaining">Objects: 48</div>
    <div id="score">Score: 0</div>
  </div>

  <div class="boost-indicator">
    <div>⚡ Boost (Shift)</div>
    <div class="boost-bar"><div class="boost-fill" id="boostFill" style="width:100%;"></div></div>
  </div>

  <div class="ammo-indicator">
    <div>🔫 Ammo (Space)</div>
    <div class="ammo-display" id="ammoDisplay">
      <div class="ammo-bullet"></div><div class="ammo-bullet"></div><div class="ammo-bullet"></div><div class="ammo-bullet"></div><div class="ammo-bullet"></div>
    </div>
  </div>

  <div class="controls">
    <div><strong>🎮 Controls:</strong></div>
    <div>🔼🔽◀️▶️ Arrow Keys / WASD - Move</div>
    <div>⚡ Shift - Speed Boost</div>
    <div>🔫 Space - Shoot</div>
    <div>🔄 R - Restart Game</div>
    <div>🎯 Eat smaller objects to grow</div>
    <div>⚠️ Avoid larger objects!</div>
  </div>

  <div class="victory-screen" id="victoryScreen">
    <div class="victory-content">
      <h1>🎉 CONGRATULATIONS! 🎉</h1>
      <h2>You've conquered the entire solar field!</h2>
      <p>You successfully devoured all celestial objects and became the ultimate space entity!</p>
      <div id="finalScore">Final Score: 0</div>
      <button class="restart-btn" onclick="restartGame()">🚀 Play Again</button>
    </div>
  </div>

  <div class="game-over-screen" id="gameOverScreen">
    <div class="game-over-content">
      <h1>💥 GAME OVER 💥</h1>
      <h2>Your spaceship was destroyed!</h2>
      <p>You ran out of lives trying to consume objects too large for your ship.</p>
      <div id="gameOverScore">Score: 0</div>
      <button class="restart-btn" onclick="restartGame()">Try Again</button>
    </div>
  </div>
</div>

<script>
class SpaceDevourerGame{
  constructor(){
    this.gameArea = document.getElementById('gameArea');
    this.world = document.getElementById('world');
    this.spaceship = document.getElementById('spaceship');
    this.shipEmoji = this.spaceship.querySelector('.ship-emoji');
    this.shipFlame = this.spaceship.querySelector('.ship-flame');
    this.minimapWorld = document.getElementById('minimapWorld');
    this.minimapSpaceship = document.getElementById('minimapSpaceship');

    this.lives = 3; this.score = 0;

    this.worldWidth = 2400; this.worldHeight = 2400;

    this.spaceshipSize = 30;
    this.spaceshipX = this.worldWidth/2;
    this.spaceshipY = this.worldHeight/2;

    this.boostEnergy = 50; this.maxBoostEnergy = 50;
    this.isBoostActive = false; this.damageImmunity = false;

    this.celestialObjects = []; this.minimapObjects = []; this.minimapAmmo = [];
    this.bullets = []; this.ammoPickups = []; this.healthPickups = [];
    this.ammo = 5; this.maxAmmo = 5;

    this.lastDirection = {x:0, y:-1};
    this.keys = {};

    // Kamera / Zoom
    this.cameraScale = 1; this.targetShipScreen = 40;
    this.minScale = 0.35; this.maxScale = 2.0; this.zoomSmooth = 0.08;

    this.minimapWidth = 200; this.minimapHeight = 200;

    this.startTime = Date.now(); this.gameTime = 0;

    this.init();
    this.updateScoreHistory();
    window.addEventListener('resize', ()=> this.updateCamera());
  }

  init(){
    this.createCelestialObjects();
    this.createAmmoPickups();
    this.updateSpaceshipPosition();
    this.updateAmmoDisplay();
    this.setupEventListeners();
    this.gameLoop();
  }

  createCelestialObjects(){
    const objectTypes = [
      { class:'asteroid', size:[10,20], count:25, points:5 },
      { class:'moon', size:[20,30], count:20, points:10 },
      { class:'small-planet', size:[35,50], count:15, points:50 },
      { class:'medium-planet', size:[55,75], count:10, points:100 },
      { class:'large-planet', size:[80,100], count:7, points:200 }
    ];
    objectTypes.forEach(t=>{ for(let i=0;i<t.count;i++) this.createCelestialObject(t); });
    this.updateProgress();
  }

  createAmmoPickups(){
    for(let i=0;i<4;i++){ this.createAmmoPickup(40,1); this.createAmmoPickup(50,2); }
    const healthCount = Math.floor(Math.random()*3)+2;
    for(let i=0;i<healthCount;i++) this.createHealthPickup();
  }

  createAmmoPickup(size,ammoAmount){
    let x,y,a=0;
    do{ x=Math.random()*(this.worldWidth-size-100)+50; y=Math.random()*(this.worldHeight-size-100)+50; a++; }
    while(this.isPositionOccupied(x,y,size)&&a<50);
    const el=document.createElement('div'); el.className='ammo-pickup';
    Object.assign(el.style,{left:x+'px',top:y+'px',width:size+'px',height:size+'px'}); el.textContent='Ammo';
    this.world.appendChild(el);
    const pickup={element:el,x,y,size,ammoAmount}; this.ammoPickups.push(pickup); this.createMinimapAmmo(pickup);
  }

  createHealthPickup(){
    const size=35; let x,y,a=0;
    do{ x=Math.random()*(this.worldWidth-size-100)+50; y=Math.random()*(this.worldHeight-size-100)+50; a++; }
    while(this.isPositionOccupied(x,y,size)&&a<50);
    const el=document.createElement('div'); el.className='health-pickup';
    Object.assign(el.style,{left:x+'px',top:y+'px',width:size+'px',height:size+'px'}); el.textContent='Health';
    this.world.appendChild(el);
    const pickup={element:el,x,y,size}; this.healthPickups.push(pickup); this.createMinimapHealth(pickup);
  }

  createMinimapAmmo(p){
    const m=document.createElement('div'); m.className='minimap-ammo';
    const mx=(p.x/this.worldWidth)*this.minimapWidth, my=(p.y/this.worldHeight)*this.minimapHeight;
    const ms=Math.max(3,Math.min(6,(p.size/50)*4));
    Object.assign(m.style,{left:(mx-ms/2)+'px',top:(my-ms/2)+'px',width:ms+'px',height:ms+'px'});
    this.minimapWorld.appendChild(m); this.minimapAmmo.push({element:m,gameObject:p});
  }

  createMinimapHealth(p){
    const m=document.createElement('div'); m.className='minimap-ammo';
    m.style.background='#2196f3'; m.style.borderColor='rgba(33,150,243,.8)'; m.style.boxShadow='0 0 4px rgba(33,150,243,.8)';
    const mx=(p.x/this.worldWidth)*this.minimapWidth, my=(p.y/this.worldHeight)*this.minimapHeight;
    const ms=4; Object.assign(m.style,{left:(mx-ms/2)+'px',top:(my-ms/2)+'px',width:ms+'px',height:ms+'px'});
    this.minimapWorld.appendChild(m); this.minimapAmmo.push({element:m,gameObject:p,type:'health'});
  }

  createCelestialObject(type){
    const size=Math.random()*(type.size[1]-type.size[0])+type.size[0];
    let x,y,a=0;
    do{ x=Math.random()*(this.worldWidth-size-100)+50; y=Math.random()*(this.worldHeight-size-100)+50; a++; }
    while(this.isPositionOccupied(x,y,size)&&a<50);
    const el=document.createElement('div'); el.className=`celestial-object ${type.class}`;
    Object.assign(el.style,{width:size+'px',height:size+'px',left:x+'px',top:y+'px'});
    const emojis={'asteroid':'🪨','moon':'🌙','small-planet':'🔴','medium-planet':'🌍','large-planet':'🪐','gas-giant':'GAS'};
    el.innerHTML=`<div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:${size*0.4}px;">${emojis[type.class]||'🪐'}</div>`;
    this.world.appendChild(el);
    const obj={element:el,x,y,size,type:type.class,points:type.points}; this.celestialObjects.push(obj);
    this.createMinimapObject(obj);
  }

  createMinimapObject(o){
    const m=document.createElement('div'); m.className='minimap-object';
    const mx=(o.x/this.worldWidth)*this.minimapWidth, my=(o.y/this.worldHeight)*this.minimapHeight;
    const ms=Math.max(2,Math.min(8,(o.size/100)*6));
    Object.assign(m.style,{left:(mx-ms/2)+'px',top:(my-ms/2)+'px',width:ms+'px',height:ms+'px'});
    this.updateMinimapObjectStatus(m,o); this.minimapWorld.appendChild(m);
    this.minimapObjects.push({element:m,gameObject:o});
  }

  updateMinimapObjectStatus(el,o){
    el.classList.remove('edible','dangerous','neutral');
    if(this.spaceshipSize >= o.size*0.6) el.classList.add('edible');
    else if(o.size > this.spaceshipSize*1.5) el.classList.add('dangerous');
    else el.classList.add('neutral');
  }

  isPositionOccupied(x,y,size){
    const dShip=Math.hypot(x+size/2-(this.spaceshipX+this.spaceshipSize/2), y+size/2-(this.spaceshipY+this.spaceshipSize/2));
    if(dShip < (size/2 + this.spaceshipSize/2 + 50)) return true;
    const coll1=this.celestialObjects.some(o=>Math.hypot(x+size/2-(o.x+o.size/2), y+size/2-(o.y+o.size/2)) < (size/2+o.size/2+20));
    const coll2=this.ammoPickups.some(p=>Math.hypot(x+size/2-(p.x+p.size/2), y+size/2-(p.y+p.size/2)) < (size/2+p.size/2+20));
    return coll1||coll2;
  }

  setupEventListeners(){
    document.addEventListener('keydown', e=>{
      this.keys[e.key]=true;
      if(e.key===' '){e.preventDefault();this.shoot();}
      if(e.key==='Shift'){e.preventDefault();this.activateBoost();}
      if(e.key==='r'||e.key==='R'){e.preventDefault();restartGame();}
    });
    document.addEventListener('keyup', e=>{
      this.keys[e.key]=false;
      if(e.key==='Shift') this.isBoostActive=false;
    });
  }

  activateBoost(){ if(this.boostEnergy>0) this.isBoostActive=true; }

  shoot(){
    if(this.ammo<=0) return;
    this.ammo--; this.updateAmmoDisplay();
    const bullet={
      element:document.createElement('div'),
      x:this.spaceshipX+this.spaceshipSize/2-4,
      y:this.spaceshipY+this.spaceshipSize/2-4,
      vx:(this.lastDirection.x||0)*10,
      vy:(this.lastDirection.y||-1)*10,
      size:8
    };
    bullet.element.className='bullet';
    bullet.element.style.left=bullet.x+'px'; bullet.element.style.top=bullet.y+'px';
    this.world.appendChild(bullet.element); this.bullets.push(bullet);
  }

  updateMovement(){
    let moveSpeed=4;
    if(this.isBoostActive && this.boostEnergy>0){ moveSpeed=8; this.boostEnergy=Math.max(0,this.boostEnergy-2);}
    else{ this.boostEnergy=Math.min(this.maxBoostEnergy,this.boostEnergy+0.5); }

    let targetDir={x:this.lastDirection.x,y:this.lastDirection.y};

    if(this.keys['ArrowUp']||this.keys['w']||this.keys['W']){ this.spaceshipY-=moveSpeed; targetDir={x:0,y:-1}; }
    if(this.keys['ArrowDown']||this.keys['s']||this.keys['S']){ this.spaceshipY+=moveSpeed; targetDir={x:0,y:1}; }
    if(this.keys['ArrowLeft']||this.keys['a']||this.keys['A']){ this.spaceshipX-=moveSpeed; targetDir={x:-1,y:0}; }
    if(this.keys['ArrowRight']||this.keys['d']||this.keys['D']){ this.spaceshipX+=moveSpeed; targetDir={x:1,y:0}; }

    if((this.keys['ArrowUp']||this.keys['w']||this.keys['W'])&&(this.keys['ArrowRight']||this.keys['d']||this.keys['D'])) targetDir={x:0.7,y:-0.7};
    else if((this.keys['ArrowUp']||this.keys['w']||this.keys['W'])&&(this.keys['ArrowLeft']||this.keys['a']||this.keys['A'])) targetDir={x:-0.7,y:-0.7};
    else if((this.keys['ArrowDown']||this.keys['s']||this.keys['S'])&&(this.keys['ArrowRight']||this.keys['d']||this.keys['D'])) targetDir={x:0.7,y:0.7};
    else if((this.keys['ArrowDown']||this.keys['s']||this.keys['S'])&&(this.keys['ArrowLeft']||this.keys['a']||this.keys['A'])) targetDir={x:-0.7,y:0.7};

    const smooth=0.15;
    this.lastDirection.x += (targetDir.x - this.lastDirection.x)*smooth;
    this.lastDirection.y += (targetDir.y - this.lastDirection.y)*smooth;

    // sınırlar
    this.spaceshipX = Math.max(0, Math.min(this.worldWidth - this.spaceshipSize, this.spaceshipX));
    this.spaceshipY = Math.max(0, Math.min(this.worldHeight - this.spaceshipSize, this.spaceshipY));

    this.updateSpaceshipPosition();
    this.updateBoostBar();
  }

  updateSpaceshipPosition(){
    this.spaceship.style.left=this.spaceshipX+'px';
    this.spaceship.style.top=this.spaceshipY+'px';
    this.spaceship.style.width=this.spaceshipSize+'px';
    this.spaceship.style.height=this.spaceshipSize+'px';

    // emoji boyutu
    const rocketSize=Math.max(16,this.spaceshipSize*0.5);
    this.shipEmoji.style.fontSize=rocketSize+'px';

    // YÖNE GÖRE DÖNME
    this.updateHeadingVisuals();

    // kamera + minimap
    this.updateCamera();
    this.updateMinimap();
  }

  updateHeadingVisuals(){
    const angle = Math.atan2(this.lastDirection.y, this.lastDirection.x); // rad
    const deg = angle*180/Math.PI + 90; // 0deg = yukarı
    this.spaceship.style.transform = `rotate(${deg}deg)`;

    // alev yoğunluğu: boost'ta daha büyük, hareket yoksa görünmez
    const moving = Math.hypot(this.lastDirection.x, this.lastDirection.y) > 0.15;
    if(this.isBoostActive && this.boostEnergy>0){
      this.shipFlame.style.opacity = 1;
      this.shipFlame.style.transform = 'translate(-50%, -20%) scaleY(1.8)';
    }else if(moving){
      this.shipFlame.style.opacity = 0.65;
      this.shipFlame.style.transform = 'translate(-50%, -20%) scaleY(1.2)';
    }else{
      this.shipFlame.style.opacity = 0;
      this.shipFlame.style.transform = 'translate(-50%, -20%) scaleY(1)';
    }
  }

  // Kamera / Zoom
  updateCamera(){
    const vw=window.innerWidth, vh=window.innerHeight;
    const desired = this.targetShipScreen / this.spaceshipSize;
    const clamped = Math.max(this.minScale, Math.min(this.maxScale, desired));
    this.cameraScale += (clamped - this.cameraScale)*this.zoomSmooth;

    const cx=this.spaceshipX+this.spaceshipSize/2, cy=this.spaceshipY+this.spaceshipSize/2;
    const tx = (vw/2) - cx*this.cameraScale;
    const ty = (vh/2) - cy*this.cameraScale;
    this.world.style.transform = `translate(${tx}px, ${ty}px) scale(${this.cameraScale})`;
  }

  updateMinimap(){
    const mx=(this.spaceshipX/this.worldWidth)*this.minimapWidth;
    const my=(this.spaceshipY/this.worldHeight)*this.minimapHeight;
    this.minimapSpaceship.style.left=(mx-3)+'px';
    this.minimapSpaceship.style.top=(my-3)+'px';
    this.minimapObjects.forEach(m=>this.updateMinimapObjectStatus(m.element,m.gameObject));
  }

  updateBullets(){
    for(let i=this.bullets.length-1;i>=0;i--){
      const b=this.bullets[i];
      b.x+=b.vx; b.y+=b.vy;
      b.element.style.left=b.x+'px'; b.element.style.top=b.y+'px';
      if(b.x<0||b.x>this.worldWidth||b.y<0||b.y>this.worldHeight){ b.element.remove(); this.bullets.splice(i,1); continue; }
      for(let j=this.celestialObjects.length-1;j>=0;j--){
        const o=this.celestialObjects[j];
        const d=Math.hypot(b.x+4-(o.x+o.size/2), b.y+4-(o.y+o.size/2));
        if(d<(o.size/2+4)){
          b.element.remove(); this.bullets.splice(i,1);
          if(!o.hits) o.hits=0; o.hits++;
          o.element.classList.add('planet-hit');
          setTimeout(()=>{ if(o.element) o.element.classList.remove('planet-hit'); },300);
          if(o.hits>=2) this.consumeObject(o,j);
          break;
        }
      }
    }
  }

  checkCollisions(){
    const sx=this.spaceshipX+this.spaceshipSize/2;
    const sy=this.spaceshipY+this.spaceshipSize/2;

    // duvara çok yakınsa ek tolerans
    const nearWall = (this.spaceshipX<=1 || this.spaceshipY<=1 ||
                      this.spaceshipX>=this.worldWidth-this.spaceshipSize-1 ||
                      this.spaceshipY>=this.worldHeight-this.spaceshipSize-1);
    const slack = nearWall ? 8 : 0;

    // gezegenler
    for(let i=this.celestialObjects.length-1;i>=0;i--){
      const o=this.celestialObjects[i];
      const ox=o.x+o.size/2, oy=o.y+o.size/2;
      const d=Math.hypot(sx-ox, sy-oy);
      const rSum=(this.spaceshipSize/2 + o.size/2);

      if(d <= rSum + slack){
        if(this.spaceshipSize >= o.size*0.6){
          this.consumeObject(o,i);
        }else if(o.size > this.spaceshipSize*1.5){
          this.takeDamage();
          const pushX=(sx-ox)*0.5, pushY=(sy-oy)*0.5;
          this.spaceshipX+=pushX; this.spaceshipY+=pushY;
          this.spaceshipX=Math.max(0,Math.min(this.worldWidth-this.spaceshipSize,this.spaceshipX));
          this.spaceshipY=Math.max(0,Math.min(this.worldHeight-this.spaceshipSize,this.spaceshipY));
        }
      }
    }

    // mermi & can paketleri de köşede rahat alınsın
    for(let i=this.ammoPickups.length-1;i>=0;i--){
      const p=this.ammoPickups[i];
      const d=Math.hypot(sx-(p.x+p.size/2), sy-(p.y+p.size/2));
      if(d <= (this.spaceshipSize/2 + p.size/2) + slack){
        this.ammo=Math.min(this.maxAmmo,this.ammo+p.ammoAmount); this.updateAmmoDisplay();
        p.element.remove(); this.ammoPickups.splice(i,1);
        const idx=this.minimapAmmo.findIndex(m=>m.gameObject===p);
        if(idx!==-1){ this.minimapAmmo[idx].element.remove(); this.minimapAmmo.splice(idx,1); }
        this.flashShip('gold');
      }
    }

    for(let i=this.healthPickups.length-1;i>=0;i--){
      const p=this.healthPickups[i];
      const d=Math.hypot(sx-(p.x+p.size/2), sy-(p.y+p.size/2));
      if(d <= (this.spaceshipSize/2 + p.size/2) + slack){
        if(this.lives<3){ this.lives++; this.updateLivesDisplay(); }
        p.element.remove(); this.healthPickups.splice(i,1);
        const idx=this.minimapAmmo.findIndex(m=>m.gameObject===p && m.type==='health');
        if(idx!==-1){ this.minimapAmmo[idx].element.remove(); this.minimapAmmo.splice(idx,1); }
        this.flashShip('red');
      }
    }
  }

  flashShip(color){
    const colors={gold:'rgba(255,215,0,.8)',green:'rgba(0,255,0,.8)',red:'rgba(255,68,68,.8)'};
    this.spaceship.style.boxShadow=`0 0 30px ${colors[color]||'rgba(0,255,0,.8)'}`;
    setTimeout(()=>{ this.spaceship.style.boxShadow='0 0 20px rgba(0,188,212,.8)'; },200);
  }

  consumeObject(obj,index){
    this.spaceshipSize += obj.size*0.25;
    this.score += obj.points;
    obj.element.remove(); this.celestialObjects.splice(index,1);
    const mIdx=this.minimapObjects.findIndex(m=>m.gameObject===obj);
    if(mIdx!==-1){ this.minimapObjects[mIdx].element.remove(); this.minimapObjects.splice(mIdx,1); }
    this.updateSizeDisplay(); this.updateProgress();
    if(this.celestialObjects.length===0) this.showVictory();
    this.flashShip('green');
  }

  takeDamage(){
    if(this.damageImmunity) return;
    this.lives--; this.updateLivesDisplay();
    this.damageImmunity=true; setTimeout(()=>{ this.damageImmunity=false; },1500);
    this.spaceship.style.boxShadow='0 0 30px rgba(255,0,0,.8)'; this.spaceship.style.opacity='0.7';
    setTimeout(()=>{ this.spaceship.style.boxShadow='0 0 20px rgba(0,188,212,.8)'; this.spaceship.style.opacity='1'; },1500);
    if(this.lives<=0) this.showGameOver();
  }

  updateSizeDisplay(){
    const maxDisplay=Math.max(150,this.spaceshipSize);
    const perc=Math.min(100,(this.spaceshipSize/maxDisplay)*100);
    document.getElementById('sizeFill').style.width=perc+'%';
    document.getElementById('sizeText').textContent=`Size: ${Math.round(this.spaceshipSize)}px`;
  }

  updateLivesDisplay(){
    document.querySelectorAll('.life').forEach((el,idx)=>{ if(idx>=this.lives) el.classList.add('lost'); else el.classList.remove('lost'); });
  }

  updateProgress(){
    document.getElementById('objectsRemaining').textContent=`Objects: ${this.celestialObjects.length}`;
    document.getElementById('score').textContent=`Score: ${this.score}`;
  }

  updateBoostBar(){
    const pct=(this.boostEnergy/this.maxBoostEnergy)*100;
    document.getElementById('boostFill').style.width=pct+'%';
  }

  updateAmmoDisplay(){
    document.querySelectorAll('.ammo-bullet').forEach((el,idx)=>{ if(idx<this.ammo) el.classList.remove('empty'); else el.classList.add('empty'); });
    document.getElementById('ammoCount').textContent=`${this.ammo}/${this.maxAmmo}`;
  }

  updateTimer(){
    this.gameTime=(Date.now()-this.startTime)/1000;
    const m=Math.floor(this.gameTime/60), s=Math.floor(this.gameTime%60);
    document.getElementById('gameTimer').textContent=`${m.toString().padStart(2,'0')}:${s.toString().padStart(2,'0')}`;
  }

  saveGameResult(){
    const res={score:this.score,time:this.gameTime,completed:this.celestialObjects.length===0,date:new Date().toLocaleDateString('tr-TR')};
    let hist=JSON.parse(localStorage.getItem('gameHistory')||'[]'); hist.unshift(res); if(hist.length>5) hist=hist.slice(0,5);
    localStorage.setItem('gameHistory',JSON.stringify(hist)); this.updateScoreHistory();
  }

  updateScoreHistory(){
    const hist=JSON.parse(localStorage.getItem('gameHistory')||'[]'); const el=document.getElementById('historyDisplay');
    if(hist.length===0){ el.innerHTML='Not played yet.'; return; }
    const done=hist.filter(g=>g.completed); const best=done.length>0?Math.min(...done.map(g=>g.time)):null;
    let html=''; hist.forEach(g=>{ const isBest=g.completed && g.time===best; const status=g.completed?'✅':'❌'; const t=this.formatTime(g.time);
      html+=`<span class="history-item${isBest?' best':''}">${status} ${g.score}p - ${t}</span>`; });
    el.innerHTML=html;
  }

  showVictory(){
    const final=this.gameTime; const prevBest=localStorage.getItem('bestTime'); let msg='';
    if(prevBest===null){ msg=`Your First Time: ${this.formatTime(final)}! This is your new record!`; localStorage.setItem('bestTime',final.toString()); }
    else{ const prev=parseFloat(prevBest), diff=final-prev;
      if(final<prev){ msg=`New Record! ${this.formatTime(final)} (Before: ${this.formatTime(prev)}) - ${this.formatTime(Math.abs(diff))} way faster!`; localStorage.setItem('bestTime',final.toString()); }
      else if(diff<=5){ msg=`😤 So close! ${this.formatTime(final)} (Best: ${this.formatTime(prev)}) - Just ${this.formatTime(diff)} difference!`; }
      else if(diff<=15){ msg=`🤔 ${this.formatTime(final)} (Best: ${this.formatTime(prev)}) - Come on, be more aggressive!`; }
      else{ msg=`😅 ${this.formatTime(final)} (Best: ${this.formatTime(prev)}) - What a waste of time!`; }
    }
    this.saveGameResult();
    document.getElementById('finalScore').innerHTML=`Final Score: ${this.score}<br><br>⏱️ ${msg}`;
    document.getElementById('victoryScreen').style.display='flex';
  }

  formatTime(seconds){ const m=Math.floor(seconds/60); const s=(seconds%60).toFixed(1); return m>0?`${m}:${s.padStart(4,'0')}`:`${s}s`; }

  showGameOver(){ this.saveGameResult(); document.getElementById('gameOverScore').textContent=`Score: ${this.score}`; document.getElementById('gameOverScreen').style.display='flex'; }

  gameLoop(){
    this.updateMovement();
    this.updateBullets();
    this.checkCollisions();
    this.updateTimer();
    requestAnimationFrame(()=>this.gameLoop());
  }
}

let game; let gameStarted=false;
function startGameFromWelcome(){ document.getElementById('welcomeScreen').style.display='none'; gameStarted=true; startGame(); }
function startGame(){ game = new SpaceDevourerGame(); }
function restartGame(){
  document.getElementById('gameArea').innerHTML =
    '<div class="world" id="world"><div class="spaceship" id="spaceship"><div class="ship-emoji">🚀</div><div class="ship-flame"></div></div></div>';
  document.getElementById('minimapWorld').innerHTML = '<div class="minimap-spaceship" id="minimapSpaceship"></div>';
  document.getElementById('victoryScreen').style.display='none';
  document.getElementById('gameOverScreen').style.display='none';
  document.querySelectorAll('.life').forEach(l=>l.classList.remove('lost'));
  document.querySelectorAll('.ammo-bullet').forEach(b=>b.classList.remove('empty'));
  startGame();
}
window.addEventListener('load',()=>{ if(!gameStarted) document.getElementById('welcomeScreen').style.display='flex'; });
</script>
</body>
</html>
